// WARNING: THIS FILE IS AUTOGENERATED! As such, it should not be edited.
// Edits need to be made to the proto files
// (see https://github.com/mavlink/MAVSDK-Proto/blob/main/protos/command/command.proto)

#pragma once

#include <array>
#include <cmath>
#include <functional>
#include <limits>
#include <memory>
#include <string>
#include <utility>
#include <vector>

#include "mavsdk/plugin_base.h"

namespace mavsdk {

class System;
class CommandImpl;

/**
 * @brief
 */
class Command : public PluginBase {
public:
    /**
     * @brief Constructor. Creates the plugin for a specific System.
     *
     * The plugin is typically created as shown below:
     *
     *     ```cpp
     *     auto command = Command(system);
     *     ```
     *
     * @param system The specific system associated with this plugin.
     */
    explicit Command(System& system); // deprecated

    /**
     * @brief Constructor. Creates the plugin for a specific System.
     *
     * The plugin is typically created as shown below:
     *
     *     ```cpp
     *     auto command = Command(system);
     *     ```
     *
     * @param system The specific system associated with this plugin.
     */
    explicit Command(std::shared_ptr<System> system); // new

    /**
     * @brief Destructor (internal use only).
     */
    ~Command();

    /**
     * @brief
     */
    struct CommandLong {
        uint32_t target_system{}; /**< @brief actually uint8 */
        uint32_t target_component{}; /**< @brief actually uint8 */
        uint32_t command{}; /**< @brief actually uint16 */
        uint32_t confirmation{}; /**< @brief actually uint8 */
        float param1{}; /**< @brief PARAM1, see MAV_CMD enum */
        float param2{}; /**< @brief PARAM2, see MAV_CMD enum */
        float param3{}; /**< @brief PARAM3, see MAV_CMD enum */
        float param4{}; /**< @brief PARAM4, see MAV_CMD enum */
        float param5{}; /**< @brief PARAM5, see MAV_CMD enum */
        float param6{}; /**< @brief PARAM6, see MAV_CMD enum */
        float param7{}; /**< @brief PARAM7, see MAV_CMD enum */
    };

    /**
     * @brief Equal operator to compare two `Command::CommandLong` objects.
     *
     * @return `true` if items are equal.
     */
    friend bool operator==(const Command::CommandLong& lhs, const Command::CommandLong& rhs);

    /**
     * @brief Stream operator to print information about a `Command::CommandLong`.
     *
     * @return A reference to the stream.
     */
    friend std::ostream& operator<<(std::ostream& str, Command::CommandLong const& command_long);

    /**
     * @brief
     */
    enum class Result {
        Accepted, /**< @brief. */
        TemporarilyRejected, /**< @brief. */
        Denied, /**< @brief. */
        Unsupported, /**< @brief. */
        Failed, /**< @brief. */
        InProgress, /**< @brief. */
        Cancelled, /**< @brief. */
        NoSystem, /**< @brief. */
    };

    /**
     * @brief Stream operator to print information about a `Command::Result`.
     *
     * @return A reference to the stream.
     */
    friend std::ostream& operator<<(std::ostream& str, Command::Result const& result);

    /**
     * @brief Callback type for asynchronous Command calls.
     */
    using ResultCallback = std::function<void(Result)>;

    /**
     * @brief
     *
     * This function is non-blocking. See 'send_command_long' for the blocking counterpart.
     */
    void send_command_long_async(CommandLong command, const ResultCallback callback);

    /**
     * @brief
     *
     * This function is blocking. See 'send_command_long_async' for the non-blocking counterpart.
     *
     * @return Result of request.
     */
    Result send_command_long(CommandLong command) const;

    /**
     * @brief Copy constructor.
     */
    Command(const Command& other);

    /**
     * @brief Equality operator (object is not copyable).
     */
    const Command& operator=(const Command&) = delete;

private:
    /** @private Underlying implementation, set at instantiation */
    std::unique_ptr<CommandImpl> _impl;
};

} // namespace mavsdk