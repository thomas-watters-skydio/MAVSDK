// WARNING: THIS FILE IS AUTOGENERATED! As such, it should not be edited.
// Edits need to be made to the proto files
// (see https://github.com/mavlink/MAVSDK-Proto/blob/main/protos/poi/poi.proto)

#pragma once

#include <array>
#include <cmath>
#include <functional>
#include <limits>
#include <memory>
#include <string>
#include <utility>
#include <vector>

#include "mavsdk/plugin_base.h"

namespace mavsdk {

class System;
class PoiImpl;

/**
 * @brief Allow users to get poi information
 */
class Poi : public PluginBase {
public:
    /**
     * @brief Constructor. Creates the plugin for a specific System.
     *
     * The plugin is typically created as shown below:
     *
     *     ```cpp
     *     auto poi = Poi(system);
     *     ```
     *
     * @param system The specific system associated with this plugin.
     */
    explicit Poi(System& system); // deprecated

    /**
     * @brief Constructor. Creates the plugin for a specific System.
     *
     * The plugin is typically created as shown below:
     *
     *     ```cpp
     *     auto poi = Poi(system);
     *     ```
     *
     * @param system The specific system associated with this plugin.
     */
    explicit Poi(std::shared_ptr<System> system); // new

    /**
     * @brief Destructor (internal use only).
     */
    ~Poi();

    /**
     * @brief
     */
    struct PoiReport {
        uint64_t uid{}; /**< @brief */
        uint64_t time_utc_detected{}; /**< @brief */
        uint64_t time_utc_updated{}; /**< @brief */
        uint32_t time_boot_ms{}; /**< @brief */
        int32_t latitude{}; /**< @brief */
        int32_t longitude{}; /**< @brief */
        float alt_msl{}; /**< @brief */
        float alt_ellip{}; /**< @brief */
        float alt_ground{}; /**< @brief */
        uint32_t classification{}; /**< @brief */
        float x{}; /**< @brief */
        float y{}; /**< @brief */
        float z{}; /**< @brief */
        std::vector<float> q{}; /**< @brief */
        float dist{}; /**< @brief */
        float vel_n{}; /**< @brief */
        float vel_e{}; /**< @brief */
        float vel_d{}; /**< @brief */
        float hdg{}; /**< @brief */
        float height{}; /**< @brief */
        float width{}; /**< @brief */
        float depth{}; /**< @brief */
        std::vector<float> approach_vector_start{}; /**< @brief */
        std::vector<float> approach_vector_end{}; /**< @brief */
        std::vector<float> approach_velocity{}; /**< @brief */
        uint32_t ttl{}; /**< @brief actually uint16 */
        uint32_t confidence_overall{}; /**< @brief actually uint8 */
        uint32_t confidence_detection{}; /**< @brief actually uint8 */
        uint32_t confidence_classification{}; /**< @brief actually uint8 */
        uint32_t confidence_localization{}; /**< @brief actually uint8 */
        uint32_t status_flags{}; /**< @brief actually uint8 */
        uint32_t geometry{}; /**< @brief actually uint8 */
        std::string name{}; /**< @brief 32 byte string */
        std::string app6_symbol{}; /**< @brief 31 byte string */
    };

    /**
     * @brief Equal operator to compare two `Poi::PoiReport` objects.
     *
     * @return `true` if items are equal.
     */
    friend bool operator==(const Poi::PoiReport& lhs, const Poi::PoiReport& rhs);

    /**
     * @brief Stream operator to print information about a `Poi::PoiReport`.
     *
     * @return A reference to the stream.
     */
    friend std::ostream& operator<<(std::ostream& str, Poi::PoiReport const& poi_report);

    /**
     * @brief Callback type for subscribe_poi_report.
     */

    using PoiReportCallback = std::function<void(PoiReport)>;

    /**
     * @brief Subscribe to 'poi' updates.
     */
    void subscribe_poi_report(PoiReportCallback callback);

    /**
     * @brief Poll for 'PoiReport' (blocking).
     *
     * @return One PoiReport update.
     */
    PoiReport poi_report() const;

    /**
     * @brief Copy constructor.
     */
    Poi(const Poi& other);

    /**
     * @brief Equality operator (object is not copyable).
     */
    const Poi& operator=(const Poi&) = delete;

private:
    /** @private Underlying implementation, set at instantiation */
    std::unique_ptr<PoiImpl> _impl;
};

} // namespace mavsdk