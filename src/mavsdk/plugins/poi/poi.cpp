// WARNING: THIS FILE IS AUTOGENERATED! As such, it should not be edited.
// Edits need to be made to the proto files
// (see https://github.com/mavlink/MAVSDK-Proto/blob/master/protos/poi/poi.proto)

#include <iomanip>

#include "poi_impl.h"
#include "plugins/poi/poi.h"

namespace mavsdk {

using PoiReport = Poi::PoiReport;

Poi::Poi(System& system) : PluginBase(), _impl{std::make_unique<PoiImpl>(system)} {}

Poi::Poi(std::shared_ptr<System> system) : PluginBase(), _impl{std::make_unique<PoiImpl>(system)} {}

Poi::~Poi() {}

void Poi::subscribe_poi_report(PoiReportCallback callback)
{
    _impl->subscribe_poi_report(callback);
}

Poi::PoiReport Poi::poi_report() const
{
    return _impl->poi_report();
}

bool operator==(const Poi::PoiReport& lhs, const Poi::PoiReport& rhs)
{
    return (rhs.uid == lhs.uid) && (rhs.time_utc_detected == lhs.time_utc_detected) &&
           (rhs.time_utc_updated == lhs.time_utc_updated) &&
           (rhs.time_boot_ms == lhs.time_boot_ms) && (rhs.latitude == lhs.latitude) &&
           (rhs.longitude == lhs.longitude) &&
           ((std::isnan(rhs.alt_msl) && std::isnan(lhs.alt_msl)) || rhs.alt_msl == lhs.alt_msl) &&
           ((std::isnan(rhs.alt_ellip) && std::isnan(lhs.alt_ellip)) ||
            rhs.alt_ellip == lhs.alt_ellip) &&
           ((std::isnan(rhs.alt_ground) && std::isnan(lhs.alt_ground)) ||
            rhs.alt_ground == lhs.alt_ground) &&
           (rhs.classification == lhs.classification) &&
           ((std::isnan(rhs.x) && std::isnan(lhs.x)) || rhs.x == lhs.x) &&
           ((std::isnan(rhs.y) && std::isnan(lhs.y)) || rhs.y == lhs.y) &&
           ((std::isnan(rhs.z) && std::isnan(lhs.z)) || rhs.z == lhs.z) && (rhs.q == lhs.q) &&
           ((std::isnan(rhs.dist) && std::isnan(lhs.dist)) || rhs.dist == lhs.dist) &&
           ((std::isnan(rhs.vel_n) && std::isnan(lhs.vel_n)) || rhs.vel_n == lhs.vel_n) &&
           ((std::isnan(rhs.vel_e) && std::isnan(lhs.vel_e)) || rhs.vel_e == lhs.vel_e) &&
           ((std::isnan(rhs.vel_d) && std::isnan(lhs.vel_d)) || rhs.vel_d == lhs.vel_d) &&
           ((std::isnan(rhs.hdg) && std::isnan(lhs.hdg)) || rhs.hdg == lhs.hdg) &&
           ((std::isnan(rhs.height) && std::isnan(lhs.height)) || rhs.height == lhs.height) &&
           ((std::isnan(rhs.width) && std::isnan(lhs.width)) || rhs.width == lhs.width) &&
           ((std::isnan(rhs.depth) && std::isnan(lhs.depth)) || rhs.depth == lhs.depth) &&
           (rhs.approach_vector_start == lhs.approach_vector_start) &&
           (rhs.approach_vector_end == lhs.approach_vector_end) &&
           (rhs.approach_velocity == lhs.approach_velocity) && (rhs.ttl == lhs.ttl) &&
           (rhs.confidence_overall == lhs.confidence_overall) &&
           (rhs.confidence_detection == lhs.confidence_detection) &&
           (rhs.confidence_classification == lhs.confidence_classification) &&
           (rhs.confidence_localization == lhs.confidence_localization) &&
           (rhs.status_flags == lhs.status_flags) && (rhs.geometry == lhs.geometry) &&
           (rhs.name == lhs.name) && (rhs.app6_symbol == lhs.app6_symbol);
}

std::ostream& operator<<(std::ostream& str, Poi::PoiReport const& poi_report)
{
    str << std::setprecision(15);
    str << "poi_report:" << '\n' << "{\n";
    str << "    uid: " << poi_report.uid << '\n';
    str << "    time_utc_detected: " << poi_report.time_utc_detected << '\n';
    str << "    time_utc_updated: " << poi_report.time_utc_updated << '\n';
    str << "    time_boot_ms: " << poi_report.time_boot_ms << '\n';
    str << "    latitude: " << poi_report.latitude << '\n';
    str << "    longitude: " << poi_report.longitude << '\n';
    str << "    alt_msl: " << poi_report.alt_msl << '\n';
    str << "    alt_ellip: " << poi_report.alt_ellip << '\n';
    str << "    alt_ground: " << poi_report.alt_ground << '\n';
    str << "    classification: " << poi_report.classification << '\n';
    str << "    x: " << poi_report.x << '\n';
    str << "    y: " << poi_report.y << '\n';
    str << "    z: " << poi_report.z << '\n';
    str << "    q: [";
    for (auto it = poi_report.q.begin(); it != poi_report.q.end(); ++it) {
        str << *it;
        str << (it + 1 != poi_report.q.end() ? ", " : "]\n");
    }
    str << "    dist: " << poi_report.dist << '\n';
    str << "    vel_n: " << poi_report.vel_n << '\n';
    str << "    vel_e: " << poi_report.vel_e << '\n';
    str << "    vel_d: " << poi_report.vel_d << '\n';
    str << "    hdg: " << poi_report.hdg << '\n';
    str << "    height: " << poi_report.height << '\n';
    str << "    width: " << poi_report.width << '\n';
    str << "    depth: " << poi_report.depth << '\n';
    str << "    approach_vector_start: [";
    for (auto it = poi_report.approach_vector_start.begin();
         it != poi_report.approach_vector_start.end();
         ++it) {
        str << *it;
        str << (it + 1 != poi_report.approach_vector_start.end() ? ", " : "]\n");
    }
    str << "    approach_vector_end: [";
    for (auto it = poi_report.approach_vector_end.begin();
         it != poi_report.approach_vector_end.end();
         ++it) {
        str << *it;
        str << (it + 1 != poi_report.approach_vector_end.end() ? ", " : "]\n");
    }
    str << "    approach_velocity: [";
    for (auto it = poi_report.approach_velocity.begin(); it != poi_report.approach_velocity.end();
         ++it) {
        str << *it;
        str << (it + 1 != poi_report.approach_velocity.end() ? ", " : "]\n");
    }
    str << "    ttl: " << poi_report.ttl << '\n';
    str << "    confidence_overall: " << poi_report.confidence_overall << '\n';
    str << "    confidence_detection: " << poi_report.confidence_detection << '\n';
    str << "    confidence_classification: " << poi_report.confidence_classification << '\n';
    str << "    confidence_localization: " << poi_report.confidence_localization << '\n';
    str << "    status_flags: " << poi_report.status_flags << '\n';
    str << "    geometry: " << poi_report.geometry << '\n';
    str << "    name: " << poi_report.name << '\n';
    str << "    app6_symbol: " << poi_report.app6_symbol << '\n';
    str << '}';
    return str;
}

} // namespace mavsdk