// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: command/command.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_command_2fcommand_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_command_2fcommand_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_command_2fcommand_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_command_2fcommand_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_command_2fcommand_2eproto;
namespace mavsdk {
namespace rpc {
namespace command {
class CommandLong;
struct CommandLongDefaultTypeInternal;
extern CommandLongDefaultTypeInternal _CommandLong_default_instance_;
class CommandResult;
struct CommandResultDefaultTypeInternal;
extern CommandResultDefaultTypeInternal _CommandResult_default_instance_;
class SendCommandLongRequest;
struct SendCommandLongRequestDefaultTypeInternal;
extern SendCommandLongRequestDefaultTypeInternal _SendCommandLongRequest_default_instance_;
class SendCommandLongResponse;
struct SendCommandLongResponseDefaultTypeInternal;
extern SendCommandLongResponseDefaultTypeInternal _SendCommandLongResponse_default_instance_;
}  // namespace command
}  // namespace rpc
}  // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template<> ::mavsdk::rpc::command::CommandLong* Arena::CreateMaybeMessage<::mavsdk::rpc::command::CommandLong>(Arena*);
template<> ::mavsdk::rpc::command::CommandResult* Arena::CreateMaybeMessage<::mavsdk::rpc::command::CommandResult>(Arena*);
template<> ::mavsdk::rpc::command::SendCommandLongRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::command::SendCommandLongRequest>(Arena*);
template<> ::mavsdk::rpc::command::SendCommandLongResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::command::SendCommandLongResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mavsdk {
namespace rpc {
namespace command {

enum CommandResult_Result : int {
  CommandResult_Result_RESULT_UNKNOWN = 0,
  CommandResult_Result_RESULT_SUCCESS = 1,
  CommandResult_Result_RESULT_NO_SYSTEM = 2,
  CommandResult_Result_RESULT_CONNECTION_ERROR = 3,
  CommandResult_Result_RESULT_BUSY = 4,
  CommandResult_Result_RESULT_COMMAND_DENIED = 5,
  CommandResult_Result_RESULT_COMMAND_DENIED_LANDED_STATE_UNKNOWN = 6,
  CommandResult_Result_RESULT_COMMAND_DENIED_NOT_LANDED = 7,
  CommandResult_Result_RESULT_TIMEOUT = 8,
  CommandResult_Result_RESULT_VTOL_TRANSITION_SUPPORT_UNKNOWN = 9,
  CommandResult_Result_RESULT_NO_VTOL_TRANSITION_SUPPORT = 10,
  CommandResult_Result_RESULT_PARAMETER_ERROR = 11,
  CommandResult_Result_RESULT_UNSUPPORTED = 12,
  CommandResult_Result_CommandResult_Result_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CommandResult_Result_CommandResult_Result_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CommandResult_Result_IsValid(int value);
constexpr CommandResult_Result CommandResult_Result_Result_MIN = CommandResult_Result_RESULT_UNKNOWN;
constexpr CommandResult_Result CommandResult_Result_Result_MAX = CommandResult_Result_RESULT_UNSUPPORTED;
constexpr int CommandResult_Result_Result_ARRAYSIZE = CommandResult_Result_Result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CommandResult_Result_descriptor();
template<typename T>
inline const std::string& CommandResult_Result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CommandResult_Result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CommandResult_Result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CommandResult_Result_descriptor(), enum_t_value);
}
inline bool CommandResult_Result_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CommandResult_Result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CommandResult_Result>(
    CommandResult_Result_descriptor(), name, value);
}
// ===================================================================

class SendCommandLongRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.command.SendCommandLongRequest) */ {
 public:
  inline SendCommandLongRequest() : SendCommandLongRequest(nullptr) {}
  ~SendCommandLongRequest() override;
  explicit constexpr SendCommandLongRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendCommandLongRequest(const SendCommandLongRequest& from);
  SendCommandLongRequest(SendCommandLongRequest&& from) noexcept
    : SendCommandLongRequest() {
    *this = ::std::move(from);
  }

  inline SendCommandLongRequest& operator=(const SendCommandLongRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendCommandLongRequest& operator=(SendCommandLongRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendCommandLongRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendCommandLongRequest* internal_default_instance() {
    return reinterpret_cast<const SendCommandLongRequest*>(
               &_SendCommandLongRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SendCommandLongRequest& a, SendCommandLongRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SendCommandLongRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendCommandLongRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendCommandLongRequest* New() const final {
    return new SendCommandLongRequest();
  }

  SendCommandLongRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendCommandLongRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendCommandLongRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SendCommandLongRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendCommandLongRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.command.SendCommandLongRequest";
  }
  protected:
  explicit SendCommandLongRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
  };
  // .mavsdk.rpc.command.CommandLong command = 1;
  bool has_command() const;
  private:
  bool _internal_has_command() const;
  public:
  void clear_command();
  const ::mavsdk::rpc::command::CommandLong& command() const;
  PROTOBUF_MUST_USE_RESULT ::mavsdk::rpc::command::CommandLong* release_command();
  ::mavsdk::rpc::command::CommandLong* mutable_command();
  void set_allocated_command(::mavsdk::rpc::command::CommandLong* command);
  private:
  const ::mavsdk::rpc::command::CommandLong& _internal_command() const;
  ::mavsdk::rpc::command::CommandLong* _internal_mutable_command();
  public:
  void unsafe_arena_set_allocated_command(
      ::mavsdk::rpc::command::CommandLong* command);
  ::mavsdk::rpc::command::CommandLong* unsafe_arena_release_command();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.command.SendCommandLongRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::command::CommandLong* command_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_command_2fcommand_2eproto;
};
// -------------------------------------------------------------------

class CommandLong final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.command.CommandLong) */ {
 public:
  inline CommandLong() : CommandLong(nullptr) {}
  ~CommandLong() override;
  explicit constexpr CommandLong(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandLong(const CommandLong& from);
  CommandLong(CommandLong&& from) noexcept
    : CommandLong() {
    *this = ::std::move(from);
  }

  inline CommandLong& operator=(const CommandLong& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandLong& operator=(CommandLong&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandLong& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandLong* internal_default_instance() {
    return reinterpret_cast<const CommandLong*>(
               &_CommandLong_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CommandLong& a, CommandLong& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandLong* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandLong* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandLong* New() const final {
    return new CommandLong();
  }

  CommandLong* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandLong>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandLong& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandLong& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandLong* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.command.CommandLong";
  }
  protected:
  explicit CommandLong(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetSystemFieldNumber = 1,
    kTargetComponentFieldNumber = 2,
    kCommandFieldNumber = 3,
    kConfirmationFieldNumber = 4,
    kParam1FieldNumber = 5,
    kParam2FieldNumber = 6,
    kParam3FieldNumber = 7,
    kParam4FieldNumber = 8,
    kParam5FieldNumber = 9,
    kParam6FieldNumber = 10,
    kParam7FieldNumber = 11,
  };
  // uint32 target_system = 1;
  void clear_target_system();
  ::PROTOBUF_NAMESPACE_ID::uint32 target_system() const;
  void set_target_system(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_target_system() const;
  void _internal_set_target_system(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 target_component = 2;
  void clear_target_component();
  ::PROTOBUF_NAMESPACE_ID::uint32 target_component() const;
  void set_target_component(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_target_component() const;
  void _internal_set_target_component(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 command = 3;
  void clear_command();
  ::PROTOBUF_NAMESPACE_ID::uint32 command() const;
  void set_command(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_command() const;
  void _internal_set_command(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 confirmation = 4;
  void clear_confirmation();
  ::PROTOBUF_NAMESPACE_ID::uint32 confirmation() const;
  void set_confirmation(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_confirmation() const;
  void _internal_set_confirmation(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float param1 = 5;
  void clear_param1();
  float param1() const;
  void set_param1(float value);
  private:
  float _internal_param1() const;
  void _internal_set_param1(float value);
  public:

  // float param2 = 6;
  void clear_param2();
  float param2() const;
  void set_param2(float value);
  private:
  float _internal_param2() const;
  void _internal_set_param2(float value);
  public:

  // float param3 = 7;
  void clear_param3();
  float param3() const;
  void set_param3(float value);
  private:
  float _internal_param3() const;
  void _internal_set_param3(float value);
  public:

  // float param4 = 8;
  void clear_param4();
  float param4() const;
  void set_param4(float value);
  private:
  float _internal_param4() const;
  void _internal_set_param4(float value);
  public:

  // float param5 = 9;
  void clear_param5();
  float param5() const;
  void set_param5(float value);
  private:
  float _internal_param5() const;
  void _internal_set_param5(float value);
  public:

  // float param6 = 10;
  void clear_param6();
  float param6() const;
  void set_param6(float value);
  private:
  float _internal_param6() const;
  void _internal_set_param6(float value);
  public:

  // float param7 = 11;
  void clear_param7();
  float param7() const;
  void set_param7(float value);
  private:
  float _internal_param7() const;
  void _internal_set_param7(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.command.CommandLong)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 target_system_;
  ::PROTOBUF_NAMESPACE_ID::uint32 target_component_;
  ::PROTOBUF_NAMESPACE_ID::uint32 command_;
  ::PROTOBUF_NAMESPACE_ID::uint32 confirmation_;
  float param1_;
  float param2_;
  float param3_;
  float param4_;
  float param5_;
  float param6_;
  float param7_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_command_2fcommand_2eproto;
};
// -------------------------------------------------------------------

class SendCommandLongResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.command.SendCommandLongResponse) */ {
 public:
  inline SendCommandLongResponse() : SendCommandLongResponse(nullptr) {}
  ~SendCommandLongResponse() override;
  explicit constexpr SendCommandLongResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendCommandLongResponse(const SendCommandLongResponse& from);
  SendCommandLongResponse(SendCommandLongResponse&& from) noexcept
    : SendCommandLongResponse() {
    *this = ::std::move(from);
  }

  inline SendCommandLongResponse& operator=(const SendCommandLongResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendCommandLongResponse& operator=(SendCommandLongResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendCommandLongResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendCommandLongResponse* internal_default_instance() {
    return reinterpret_cast<const SendCommandLongResponse*>(
               &_SendCommandLongResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SendCommandLongResponse& a, SendCommandLongResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SendCommandLongResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendCommandLongResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendCommandLongResponse* New() const final {
    return new SendCommandLongResponse();
  }

  SendCommandLongResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendCommandLongResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendCommandLongResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SendCommandLongResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendCommandLongResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.command.SendCommandLongResponse";
  }
  protected:
  explicit SendCommandLongResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandResultFieldNumber = 1,
  };
  // .mavsdk.rpc.command.CommandResult command_result = 1;
  bool has_command_result() const;
  private:
  bool _internal_has_command_result() const;
  public:
  void clear_command_result();
  const ::mavsdk::rpc::command::CommandResult& command_result() const;
  PROTOBUF_MUST_USE_RESULT ::mavsdk::rpc::command::CommandResult* release_command_result();
  ::mavsdk::rpc::command::CommandResult* mutable_command_result();
  void set_allocated_command_result(::mavsdk::rpc::command::CommandResult* command_result);
  private:
  const ::mavsdk::rpc::command::CommandResult& _internal_command_result() const;
  ::mavsdk::rpc::command::CommandResult* _internal_mutable_command_result();
  public:
  void unsafe_arena_set_allocated_command_result(
      ::mavsdk::rpc::command::CommandResult* command_result);
  ::mavsdk::rpc::command::CommandResult* unsafe_arena_release_command_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.command.SendCommandLongResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::command::CommandResult* command_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_command_2fcommand_2eproto;
};
// -------------------------------------------------------------------

class CommandResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.command.CommandResult) */ {
 public:
  inline CommandResult() : CommandResult(nullptr) {}
  ~CommandResult() override;
  explicit constexpr CommandResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandResult(const CommandResult& from);
  CommandResult(CommandResult&& from) noexcept
    : CommandResult() {
    *this = ::std::move(from);
  }

  inline CommandResult& operator=(const CommandResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandResult& operator=(CommandResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandResult* internal_default_instance() {
    return reinterpret_cast<const CommandResult*>(
               &_CommandResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CommandResult& a, CommandResult& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandResult* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandResult* New() const final {
    return new CommandResult();
  }

  CommandResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.command.CommandResult";
  }
  protected:
  explicit CommandResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CommandResult_Result Result;
  static constexpr Result RESULT_UNKNOWN =
    CommandResult_Result_RESULT_UNKNOWN;
  static constexpr Result RESULT_SUCCESS =
    CommandResult_Result_RESULT_SUCCESS;
  static constexpr Result RESULT_NO_SYSTEM =
    CommandResult_Result_RESULT_NO_SYSTEM;
  static constexpr Result RESULT_CONNECTION_ERROR =
    CommandResult_Result_RESULT_CONNECTION_ERROR;
  static constexpr Result RESULT_BUSY =
    CommandResult_Result_RESULT_BUSY;
  static constexpr Result RESULT_COMMAND_DENIED =
    CommandResult_Result_RESULT_COMMAND_DENIED;
  static constexpr Result RESULT_COMMAND_DENIED_LANDED_STATE_UNKNOWN =
    CommandResult_Result_RESULT_COMMAND_DENIED_LANDED_STATE_UNKNOWN;
  static constexpr Result RESULT_COMMAND_DENIED_NOT_LANDED =
    CommandResult_Result_RESULT_COMMAND_DENIED_NOT_LANDED;
  static constexpr Result RESULT_TIMEOUT =
    CommandResult_Result_RESULT_TIMEOUT;
  static constexpr Result RESULT_VTOL_TRANSITION_SUPPORT_UNKNOWN =
    CommandResult_Result_RESULT_VTOL_TRANSITION_SUPPORT_UNKNOWN;
  static constexpr Result RESULT_NO_VTOL_TRANSITION_SUPPORT =
    CommandResult_Result_RESULT_NO_VTOL_TRANSITION_SUPPORT;
  static constexpr Result RESULT_PARAMETER_ERROR =
    CommandResult_Result_RESULT_PARAMETER_ERROR;
  static constexpr Result RESULT_UNSUPPORTED =
    CommandResult_Result_RESULT_UNSUPPORTED;
  static inline bool Result_IsValid(int value) {
    return CommandResult_Result_IsValid(value);
  }
  static constexpr Result Result_MIN =
    CommandResult_Result_Result_MIN;
  static constexpr Result Result_MAX =
    CommandResult_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE =
    CommandResult_Result_Result_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Result_descriptor() {
    return CommandResult_Result_descriptor();
  }
  template<typename T>
  static inline const std::string& Result_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Result>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Result_Name.");
    return CommandResult_Result_Name(enum_t_value);
  }
  static inline bool Result_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Result* value) {
    return CommandResult_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultStrFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // string result_str = 2;
  void clear_result_str();
  const std::string& result_str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result_str();
  PROTOBUF_MUST_USE_RESULT std::string* release_result_str();
  void set_allocated_result_str(std::string* result_str);
  private:
  const std::string& _internal_result_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result_str(const std::string& value);
  std::string* _internal_mutable_result_str();
  public:

  // .mavsdk.rpc.command.CommandResult.Result result = 1;
  void clear_result();
  ::mavsdk::rpc::command::CommandResult_Result result() const;
  void set_result(::mavsdk::rpc::command::CommandResult_Result value);
  private:
  ::mavsdk::rpc::command::CommandResult_Result _internal_result() const;
  void _internal_set_result(::mavsdk::rpc::command::CommandResult_Result value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.command.CommandResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_str_;
  int result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_command_2fcommand_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SendCommandLongRequest

// .mavsdk.rpc.command.CommandLong command = 1;
inline bool SendCommandLongRequest::_internal_has_command() const {
  return this != internal_default_instance() && command_ != nullptr;
}
inline bool SendCommandLongRequest::has_command() const {
  return _internal_has_command();
}
inline void SendCommandLongRequest::clear_command() {
  if (GetArenaForAllocation() == nullptr && command_ != nullptr) {
    delete command_;
  }
  command_ = nullptr;
}
inline const ::mavsdk::rpc::command::CommandLong& SendCommandLongRequest::_internal_command() const {
  const ::mavsdk::rpc::command::CommandLong* p = command_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::command::CommandLong&>(
      ::mavsdk::rpc::command::_CommandLong_default_instance_);
}
inline const ::mavsdk::rpc::command::CommandLong& SendCommandLongRequest::command() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.command.SendCommandLongRequest.command)
  return _internal_command();
}
inline void SendCommandLongRequest::unsafe_arena_set_allocated_command(
    ::mavsdk::rpc::command::CommandLong* command) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(command_);
  }
  command_ = command;
  if (command) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.command.SendCommandLongRequest.command)
}
inline ::mavsdk::rpc::command::CommandLong* SendCommandLongRequest::release_command() {
  
  ::mavsdk::rpc::command::CommandLong* temp = command_;
  command_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::command::CommandLong* SendCommandLongRequest::unsafe_arena_release_command() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.command.SendCommandLongRequest.command)
  
  ::mavsdk::rpc::command::CommandLong* temp = command_;
  command_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::command::CommandLong* SendCommandLongRequest::_internal_mutable_command() {
  
  if (command_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::command::CommandLong>(GetArenaForAllocation());
    command_ = p;
  }
  return command_;
}
inline ::mavsdk::rpc::command::CommandLong* SendCommandLongRequest::mutable_command() {
  ::mavsdk::rpc::command::CommandLong* _msg = _internal_mutable_command();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.command.SendCommandLongRequest.command)
  return _msg;
}
inline void SendCommandLongRequest::set_allocated_command(::mavsdk::rpc::command::CommandLong* command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete command_;
  }
  if (command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::mavsdk::rpc::command::CommandLong>::GetOwningArena(command);
    if (message_arena != submessage_arena) {
      command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, command, submessage_arena);
    }
    
  } else {
    
  }
  command_ = command;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.command.SendCommandLongRequest.command)
}

// -------------------------------------------------------------------

// CommandLong

// uint32 target_system = 1;
inline void CommandLong::clear_target_system() {
  target_system_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandLong::_internal_target_system() const {
  return target_system_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandLong::target_system() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.command.CommandLong.target_system)
  return _internal_target_system();
}
inline void CommandLong::_internal_set_target_system(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  target_system_ = value;
}
inline void CommandLong::set_target_system(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_target_system(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.command.CommandLong.target_system)
}

// uint32 target_component = 2;
inline void CommandLong::clear_target_component() {
  target_component_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandLong::_internal_target_component() const {
  return target_component_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandLong::target_component() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.command.CommandLong.target_component)
  return _internal_target_component();
}
inline void CommandLong::_internal_set_target_component(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  target_component_ = value;
}
inline void CommandLong::set_target_component(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_target_component(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.command.CommandLong.target_component)
}

// uint32 command = 3;
inline void CommandLong::clear_command() {
  command_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandLong::_internal_command() const {
  return command_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandLong::command() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.command.CommandLong.command)
  return _internal_command();
}
inline void CommandLong::_internal_set_command(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  command_ = value;
}
inline void CommandLong::set_command(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.command.CommandLong.command)
}

// uint32 confirmation = 4;
inline void CommandLong::clear_confirmation() {
  confirmation_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandLong::_internal_confirmation() const {
  return confirmation_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandLong::confirmation() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.command.CommandLong.confirmation)
  return _internal_confirmation();
}
inline void CommandLong::_internal_set_confirmation(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  confirmation_ = value;
}
inline void CommandLong::set_confirmation(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_confirmation(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.command.CommandLong.confirmation)
}

// float param1 = 5;
inline void CommandLong::clear_param1() {
  param1_ = 0;
}
inline float CommandLong::_internal_param1() const {
  return param1_;
}
inline float CommandLong::param1() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.command.CommandLong.param1)
  return _internal_param1();
}
inline void CommandLong::_internal_set_param1(float value) {
  
  param1_ = value;
}
inline void CommandLong::set_param1(float value) {
  _internal_set_param1(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.command.CommandLong.param1)
}

// float param2 = 6;
inline void CommandLong::clear_param2() {
  param2_ = 0;
}
inline float CommandLong::_internal_param2() const {
  return param2_;
}
inline float CommandLong::param2() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.command.CommandLong.param2)
  return _internal_param2();
}
inline void CommandLong::_internal_set_param2(float value) {
  
  param2_ = value;
}
inline void CommandLong::set_param2(float value) {
  _internal_set_param2(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.command.CommandLong.param2)
}

// float param3 = 7;
inline void CommandLong::clear_param3() {
  param3_ = 0;
}
inline float CommandLong::_internal_param3() const {
  return param3_;
}
inline float CommandLong::param3() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.command.CommandLong.param3)
  return _internal_param3();
}
inline void CommandLong::_internal_set_param3(float value) {
  
  param3_ = value;
}
inline void CommandLong::set_param3(float value) {
  _internal_set_param3(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.command.CommandLong.param3)
}

// float param4 = 8;
inline void CommandLong::clear_param4() {
  param4_ = 0;
}
inline float CommandLong::_internal_param4() const {
  return param4_;
}
inline float CommandLong::param4() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.command.CommandLong.param4)
  return _internal_param4();
}
inline void CommandLong::_internal_set_param4(float value) {
  
  param4_ = value;
}
inline void CommandLong::set_param4(float value) {
  _internal_set_param4(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.command.CommandLong.param4)
}

// float param5 = 9;
inline void CommandLong::clear_param5() {
  param5_ = 0;
}
inline float CommandLong::_internal_param5() const {
  return param5_;
}
inline float CommandLong::param5() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.command.CommandLong.param5)
  return _internal_param5();
}
inline void CommandLong::_internal_set_param5(float value) {
  
  param5_ = value;
}
inline void CommandLong::set_param5(float value) {
  _internal_set_param5(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.command.CommandLong.param5)
}

// float param6 = 10;
inline void CommandLong::clear_param6() {
  param6_ = 0;
}
inline float CommandLong::_internal_param6() const {
  return param6_;
}
inline float CommandLong::param6() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.command.CommandLong.param6)
  return _internal_param6();
}
inline void CommandLong::_internal_set_param6(float value) {
  
  param6_ = value;
}
inline void CommandLong::set_param6(float value) {
  _internal_set_param6(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.command.CommandLong.param6)
}

// float param7 = 11;
inline void CommandLong::clear_param7() {
  param7_ = 0;
}
inline float CommandLong::_internal_param7() const {
  return param7_;
}
inline float CommandLong::param7() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.command.CommandLong.param7)
  return _internal_param7();
}
inline void CommandLong::_internal_set_param7(float value) {
  
  param7_ = value;
}
inline void CommandLong::set_param7(float value) {
  _internal_set_param7(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.command.CommandLong.param7)
}

// -------------------------------------------------------------------

// SendCommandLongResponse

// .mavsdk.rpc.command.CommandResult command_result = 1;
inline bool SendCommandLongResponse::_internal_has_command_result() const {
  return this != internal_default_instance() && command_result_ != nullptr;
}
inline bool SendCommandLongResponse::has_command_result() const {
  return _internal_has_command_result();
}
inline void SendCommandLongResponse::clear_command_result() {
  if (GetArenaForAllocation() == nullptr && command_result_ != nullptr) {
    delete command_result_;
  }
  command_result_ = nullptr;
}
inline const ::mavsdk::rpc::command::CommandResult& SendCommandLongResponse::_internal_command_result() const {
  const ::mavsdk::rpc::command::CommandResult* p = command_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::command::CommandResult&>(
      ::mavsdk::rpc::command::_CommandResult_default_instance_);
}
inline const ::mavsdk::rpc::command::CommandResult& SendCommandLongResponse::command_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.command.SendCommandLongResponse.command_result)
  return _internal_command_result();
}
inline void SendCommandLongResponse::unsafe_arena_set_allocated_command_result(
    ::mavsdk::rpc::command::CommandResult* command_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(command_result_);
  }
  command_result_ = command_result;
  if (command_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.command.SendCommandLongResponse.command_result)
}
inline ::mavsdk::rpc::command::CommandResult* SendCommandLongResponse::release_command_result() {
  
  ::mavsdk::rpc::command::CommandResult* temp = command_result_;
  command_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::command::CommandResult* SendCommandLongResponse::unsafe_arena_release_command_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.command.SendCommandLongResponse.command_result)
  
  ::mavsdk::rpc::command::CommandResult* temp = command_result_;
  command_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::command::CommandResult* SendCommandLongResponse::_internal_mutable_command_result() {
  
  if (command_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::command::CommandResult>(GetArenaForAllocation());
    command_result_ = p;
  }
  return command_result_;
}
inline ::mavsdk::rpc::command::CommandResult* SendCommandLongResponse::mutable_command_result() {
  ::mavsdk::rpc::command::CommandResult* _msg = _internal_mutable_command_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.command.SendCommandLongResponse.command_result)
  return _msg;
}
inline void SendCommandLongResponse::set_allocated_command_result(::mavsdk::rpc::command::CommandResult* command_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete command_result_;
  }
  if (command_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::mavsdk::rpc::command::CommandResult>::GetOwningArena(command_result);
    if (message_arena != submessage_arena) {
      command_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, command_result, submessage_arena);
    }
    
  } else {
    
  }
  command_result_ = command_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.command.SendCommandLongResponse.command_result)
}

// -------------------------------------------------------------------

// CommandResult

// .mavsdk.rpc.command.CommandResult.Result result = 1;
inline void CommandResult::clear_result() {
  result_ = 0;
}
inline ::mavsdk::rpc::command::CommandResult_Result CommandResult::_internal_result() const {
  return static_cast< ::mavsdk::rpc::command::CommandResult_Result >(result_);
}
inline ::mavsdk::rpc::command::CommandResult_Result CommandResult::result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.command.CommandResult.result)
  return _internal_result();
}
inline void CommandResult::_internal_set_result(::mavsdk::rpc::command::CommandResult_Result value) {
  
  result_ = value;
}
inline void CommandResult::set_result(::mavsdk::rpc::command::CommandResult_Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.command.CommandResult.result)
}

// string result_str = 2;
inline void CommandResult::clear_result_str() {
  result_str_.ClearToEmpty();
}
inline const std::string& CommandResult::result_str() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.command.CommandResult.result_str)
  return _internal_result_str();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandResult::set_result_str(ArgT0&& arg0, ArgT... args) {
 
 result_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.command.CommandResult.result_str)
}
inline std::string* CommandResult::mutable_result_str() {
  std::string* _s = _internal_mutable_result_str();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.command.CommandResult.result_str)
  return _s;
}
inline const std::string& CommandResult::_internal_result_str() const {
  return result_str_.Get();
}
inline void CommandResult::_internal_set_result_str(const std::string& value) {
  
  result_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CommandResult::_internal_mutable_result_str() {
  
  return result_str_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CommandResult::release_result_str() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.command.CommandResult.result_str)
  return result_str_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CommandResult::set_allocated_result_str(std::string* result_str) {
  if (result_str != nullptr) {
    
  } else {
    
  }
  result_str_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result_str,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.command.CommandResult.result_str)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace command
}  // namespace rpc
}  // namespace mavsdk

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mavsdk::rpc::command::CommandResult_Result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::command::CommandResult_Result>() {
  return ::mavsdk::rpc::command::CommandResult_Result_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_command_2fcommand_2eproto
