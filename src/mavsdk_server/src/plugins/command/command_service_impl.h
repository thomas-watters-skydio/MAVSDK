// WARNING: THIS FILE IS AUTOGENERATED! As such, it should not be edited.
// Edits need to be made to the proto files
// (see https://github.com/mavlink/MAVSDK-Proto/blob/master/protos/command/command.proto)

#include "command/command.grpc.pb.h"
#include "plugins/command/command.h"

#include "mavsdk.h"
#include "lazy_plugin.h"
#include "log.h"
#include <atomic>
#include <cmath>
#include <future>
#include <limits>
#include <memory>
#include <sstream>
#include <vector>

namespace mavsdk {
namespace mavsdk_server {

template<typename Command = Command, typename LazyPlugin = LazyPlugin<Command>>
class CommandServiceImpl final : public rpc::command::CommandService::Service {
public:
    CommandServiceImpl(LazyPlugin& lazy_plugin) : _lazy_plugin(lazy_plugin) {}

    template<typename ResponseType>
    void fillResponseWithResult(ResponseType* response, mavsdk::Command::Result& result) const
    {
        auto rpc_result = translateToRpcResult(result);

        auto* rpc_command_result = new rpc::command::CommandResult();
        rpc_command_result->set_result(rpc_result);
        std::stringstream ss;
        ss << result;
        rpc_command_result->set_result_str(ss.str());

        response->set_allocated_command_result(rpc_command_result);
    }

    static std::unique_ptr<rpc::command::CommandLong>
    translateToRpcCommandLong(const mavsdk::Command::CommandLong& command_long)
    {
        auto rpc_obj = std::make_unique<rpc::command::CommandLong>();

        rpc_obj->set_target_system(command_long.target_system);

        rpc_obj->set_target_component(command_long.target_component);

        rpc_obj->set_command(command_long.command);

        rpc_obj->set_confirmation(command_long.confirmation);

        rpc_obj->set_param1(command_long.param1);

        rpc_obj->set_param2(command_long.param2);

        rpc_obj->set_param3(command_long.param3);

        rpc_obj->set_param4(command_long.param4);

        rpc_obj->set_param5(command_long.param5);

        rpc_obj->set_param6(command_long.param6);

        rpc_obj->set_param7(command_long.param7);

        return rpc_obj;
    }

    static mavsdk::Command::CommandLong
    translateFromRpcCommandLong(const rpc::command::CommandLong& command_long)
    {
        mavsdk::Command::CommandLong obj;

        obj.target_system = command_long.target_system();

        obj.target_component = command_long.target_component();

        obj.command = command_long.command();

        obj.confirmation = command_long.confirmation();

        obj.param1 = command_long.param1();

        obj.param2 = command_long.param2();

        obj.param3 = command_long.param3();

        obj.param4 = command_long.param4();

        obj.param5 = command_long.param5();

        obj.param6 = command_long.param6();

        obj.param7 = command_long.param7();

        return obj;
    }

    static rpc::command::CommandResult::Result
    translateToRpcResult(const mavsdk::Command::Result& result)
    {
        switch (result) {
            default:
                LogErr() << "Unknown result enum value: " << static_cast<int>(result);
            // FALLTHROUGH
            case mavsdk::Command::Result::Unknown:
                return rpc::command::CommandResult_Result_RESULT_UNKNOWN;
            case mavsdk::Command::Result::Success:
                return rpc::command::CommandResult_Result_RESULT_SUCCESS;
            case mavsdk::Command::Result::NoSystem:
                return rpc::command::CommandResult_Result_RESULT_NO_SYSTEM;
            case mavsdk::Command::Result::ConnectionError:
                return rpc::command::CommandResult_Result_RESULT_CONNECTION_ERROR;
            case mavsdk::Command::Result::Busy:
                return rpc::command::CommandResult_Result_RESULT_BUSY;
            case mavsdk::Command::Result::CommandDenied:
                return rpc::command::CommandResult_Result_RESULT_COMMAND_DENIED;
            case mavsdk::Command::Result::CommandDeniedLandedStateUnknown:
                return rpc::command::
                    CommandResult_Result_RESULT_COMMAND_DENIED_LANDED_STATE_UNKNOWN;
            case mavsdk::Command::Result::CommandDeniedNotLanded:
                return rpc::command::CommandResult_Result_RESULT_COMMAND_DENIED_NOT_LANDED;
            case mavsdk::Command::Result::Timeout:
                return rpc::command::CommandResult_Result_RESULT_TIMEOUT;
            case mavsdk::Command::Result::VtolTransitionSupportUnknown:
                return rpc::command::CommandResult_Result_RESULT_VTOL_TRANSITION_SUPPORT_UNKNOWN;
            case mavsdk::Command::Result::NoVtolTransitionSupport:
                return rpc::command::CommandResult_Result_RESULT_NO_VTOL_TRANSITION_SUPPORT;
            case mavsdk::Command::Result::ParameterError:
                return rpc::command::CommandResult_Result_RESULT_PARAMETER_ERROR;
            case mavsdk::Command::Result::Unsupported:
                return rpc::command::CommandResult_Result_RESULT_UNSUPPORTED;
        }
    }

    static mavsdk::Command::Result
    translateFromRpcResult(const rpc::command::CommandResult::Result result)
    {
        switch (result) {
            default:
                LogErr() << "Unknown result enum value: " << static_cast<int>(result);
            // FALLTHROUGH
            case rpc::command::CommandResult_Result_RESULT_UNKNOWN:
                return mavsdk::Command::Result::Unknown;
            case rpc::command::CommandResult_Result_RESULT_SUCCESS:
                return mavsdk::Command::Result::Success;
            case rpc::command::CommandResult_Result_RESULT_NO_SYSTEM:
                return mavsdk::Command::Result::NoSystem;
            case rpc::command::CommandResult_Result_RESULT_CONNECTION_ERROR:
                return mavsdk::Command::Result::ConnectionError;
            case rpc::command::CommandResult_Result_RESULT_BUSY:
                return mavsdk::Command::Result::Busy;
            case rpc::command::CommandResult_Result_RESULT_COMMAND_DENIED:
                return mavsdk::Command::Result::CommandDenied;
            case rpc::command::CommandResult_Result_RESULT_COMMAND_DENIED_LANDED_STATE_UNKNOWN:
                return mavsdk::Command::Result::CommandDeniedLandedStateUnknown;
            case rpc::command::CommandResult_Result_RESULT_COMMAND_DENIED_NOT_LANDED:
                return mavsdk::Command::Result::CommandDeniedNotLanded;
            case rpc::command::CommandResult_Result_RESULT_TIMEOUT:
                return mavsdk::Command::Result::Timeout;
            case rpc::command::CommandResult_Result_RESULT_VTOL_TRANSITION_SUPPORT_UNKNOWN:
                return mavsdk::Command::Result::VtolTransitionSupportUnknown;
            case rpc::command::CommandResult_Result_RESULT_NO_VTOL_TRANSITION_SUPPORT:
                return mavsdk::Command::Result::NoVtolTransitionSupport;
            case rpc::command::CommandResult_Result_RESULT_PARAMETER_ERROR:
                return mavsdk::Command::Result::ParameterError;
            case rpc::command::CommandResult_Result_RESULT_UNSUPPORTED:
                return mavsdk::Command::Result::Unsupported;
        }
    }

    grpc::Status SendCommandLong(
        grpc::ServerContext* /* context */,
        const rpc::command::SendCommandLongRequest* request,
        rpc::command::SendCommandLongResponse* response) override
    {
        if (_lazy_plugin.maybe_plugin() == nullptr) {
            if (response != nullptr) {
                auto result = mavsdk::Command::Result::NoSystem;
                fillResponseWithResult(response, result);
            }

            return grpc::Status::OK;
        }

        if (request == nullptr) {
            LogWarn() << "SendCommandLong sent with a null request! Ignoring...";
            return grpc::Status::OK;
        }

        auto result = _lazy_plugin.maybe_plugin()->send_command_long(
            translateFromRpcCommandLong(request->command()));

        if (response != nullptr) {
            fillResponseWithResult(response, result);
        }

        return grpc::Status::OK;
    }

    void stop()
    {
        _stopped.store(true);
        for (auto& prom : _stream_stop_promises) {
            if (auto handle = prom.lock()) {
                handle->set_value();
            }
        }
    }

private:
    void register_stream_stop_promise(std::weak_ptr<std::promise<void>> prom)
    {
        // If we have already stopped, set promise immediately and don't add it to list.
        if (_stopped.load()) {
            if (auto handle = prom.lock()) {
                handle->set_value();
            }
        } else {
            _stream_stop_promises.push_back(prom);
        }
    }

    void unregister_stream_stop_promise(std::shared_ptr<std::promise<void>> prom)
    {
        for (auto it = _stream_stop_promises.begin(); it != _stream_stop_promises.end();
             /* ++it */) {
            if (it->lock() == prom) {
                it = _stream_stop_promises.erase(it);
            } else {
                ++it;
            }
        }
    }

    LazyPlugin& _lazy_plugin;
    std::atomic<bool> _stopped{false};
    std::vector<std::weak_ptr<std::promise<void>>> _stream_stop_promises{};
};

} // namespace mavsdk_server
} // namespace mavsdk