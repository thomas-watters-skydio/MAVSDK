// WARNING: THIS FILE IS AUTOGENERATED! As such, it should not be edited.
// Edits need to be made to the proto files
// (see https://github.com/mavlink/MAVSDK-Proto/blob/master/protos/poi/poi.proto)

#include "poi/poi.grpc.pb.h"
#include "plugins/poi/poi.h"

#include "mavsdk.h"
#include "lazy_plugin.h"
#include "log.h"
#include <atomic>
#include <cmath>
#include <future>
#include <limits>
#include <memory>
#include <sstream>
#include <vector>

namespace mavsdk {
namespace mavsdk_server {

template<typename Poi = Poi, typename LazyPlugin = LazyPlugin<Poi>>
class PoiServiceImpl final : public rpc::poi::PoiService::Service {
public:
    PoiServiceImpl(LazyPlugin& lazy_plugin) : _lazy_plugin(lazy_plugin) {}

    static std::unique_ptr<rpc::poi::PoiReport>
    translateToRpcPoiReport(const mavsdk::Poi::PoiReport& poi_report)
    {
        auto rpc_obj = std::make_unique<rpc::poi::PoiReport>();

        rpc_obj->set_uid(poi_report.uid);

        rpc_obj->set_time_utc_detected(poi_report.time_utc_detected);

        rpc_obj->set_time_utc_updated(poi_report.time_utc_updated);

        rpc_obj->set_time_boot_ms(poi_report.time_boot_ms);

        rpc_obj->set_latitude(poi_report.latitude);

        rpc_obj->set_longitude(poi_report.longitude);

        rpc_obj->set_alt_msl(poi_report.alt_msl);

        rpc_obj->set_alt_ellip(poi_report.alt_ellip);

        rpc_obj->set_alt_ground(poi_report.alt_ground);

        rpc_obj->set_classification(poi_report.classification);

        rpc_obj->set_x(poi_report.x);

        rpc_obj->set_y(poi_report.y);

        rpc_obj->set_z(poi_report.z);

        for (const auto& elem : poi_report.q) {
            rpc_obj->add_q(elem);
        }

        rpc_obj->set_dist(poi_report.dist);

        rpc_obj->set_vel_n(poi_report.vel_n);

        rpc_obj->set_vel_e(poi_report.vel_e);

        rpc_obj->set_vel_d(poi_report.vel_d);

        rpc_obj->set_hdg(poi_report.hdg);

        rpc_obj->set_height(poi_report.height);

        rpc_obj->set_width(poi_report.width);

        rpc_obj->set_depth(poi_report.depth);

        for (const auto& elem : poi_report.approach_vector_start) {
            rpc_obj->add_approach_vector_start(elem);
        }

        for (const auto& elem : poi_report.approach_vector_end) {
            rpc_obj->add_approach_vector_end(elem);
        }

        for (const auto& elem : poi_report.approach_velocity) {
            rpc_obj->add_approach_velocity(elem);
        }

        rpc_obj->set_ttl(poi_report.ttl);

        rpc_obj->set_confidence_overall(poi_report.confidence_overall);

        rpc_obj->set_confidence_detection(poi_report.confidence_detection);

        rpc_obj->set_confidence_classification(poi_report.confidence_classification);

        rpc_obj->set_confidence_localization(poi_report.confidence_localization);

        rpc_obj->set_status_flags(poi_report.status_flags);

        rpc_obj->set_geometry(poi_report.geometry);

        rpc_obj->set_name(poi_report.name);

        rpc_obj->set_app6_symbol(poi_report.app6_symbol);

        return rpc_obj;
    }

    static mavsdk::Poi::PoiReport translateFromRpcPoiReport(const rpc::poi::PoiReport& poi_report)
    {
        mavsdk::Poi::PoiReport obj;

        obj.uid = poi_report.uid();

        obj.time_utc_detected = poi_report.time_utc_detected();

        obj.time_utc_updated = poi_report.time_utc_updated();

        obj.time_boot_ms = poi_report.time_boot_ms();

        obj.latitude = poi_report.latitude();

        obj.longitude = poi_report.longitude();

        obj.alt_msl = poi_report.alt_msl();

        obj.alt_ellip = poi_report.alt_ellip();

        obj.alt_ground = poi_report.alt_ground();

        obj.classification = poi_report.classification();

        obj.x = poi_report.x();

        obj.y = poi_report.y();

        obj.z = poi_report.z();

        for (const auto& elem : poi_report.q()) {
            obj.q.push_back(elem);
        }

        obj.dist = poi_report.dist();

        obj.vel_n = poi_report.vel_n();

        obj.vel_e = poi_report.vel_e();

        obj.vel_d = poi_report.vel_d();

        obj.hdg = poi_report.hdg();

        obj.height = poi_report.height();

        obj.width = poi_report.width();

        obj.depth = poi_report.depth();

        for (const auto& elem : poi_report.approach_vector_start()) {
            obj.approach_vector_start.push_back(elem);
        }

        for (const auto& elem : poi_report.approach_vector_end()) {
            obj.approach_vector_end.push_back(elem);
        }

        for (const auto& elem : poi_report.approach_velocity()) {
            obj.approach_velocity.push_back(elem);
        }

        obj.ttl = poi_report.ttl();

        obj.confidence_overall = poi_report.confidence_overall();

        obj.confidence_detection = poi_report.confidence_detection();

        obj.confidence_classification = poi_report.confidence_classification();

        obj.confidence_localization = poi_report.confidence_localization();

        obj.status_flags = poi_report.status_flags();

        obj.geometry = poi_report.geometry();

        obj.name = poi_report.name();

        obj.app6_symbol = poi_report.app6_symbol();

        return obj;
    }

    grpc::Status SubscribePoiReport(
        grpc::ServerContext* /* context */,
        const mavsdk::rpc::poi::SubscribePoiReportRequest* /* request */,
        grpc::ServerWriter<rpc::poi::PoiReportResponse>* writer) override
    {
        if (_lazy_plugin.maybe_plugin() == nullptr) {
            return grpc::Status::OK;
        }

        auto stream_closed_promise = std::make_shared<std::promise<void>>();
        auto stream_closed_future = stream_closed_promise->get_future();
        register_stream_stop_promise(stream_closed_promise);

        auto is_finished = std::make_shared<bool>(false);
        auto subscribe_mutex = std::make_shared<std::mutex>();

        _lazy_plugin.maybe_plugin()->subscribe_poi_report(
            [this, &writer, &stream_closed_promise, is_finished, subscribe_mutex](
                const mavsdk::Poi::PoiReport poi_report) {
                rpc::poi::PoiReportResponse rpc_response;

                rpc_response.set_allocated_report(translateToRpcPoiReport(poi_report).release());

                std::unique_lock<std::mutex> lock(*subscribe_mutex);
                if (!*is_finished && !writer->Write(rpc_response)) {
                    _lazy_plugin.maybe_plugin()->subscribe_poi_report(nullptr);

                    *is_finished = true;
                    unregister_stream_stop_promise(stream_closed_promise);
                    stream_closed_promise->set_value();
                }
            });

        stream_closed_future.wait();
        std::unique_lock<std::mutex> lock(*subscribe_mutex);
        *is_finished = true;

        return grpc::Status::OK;
    }

    void stop()
    {
        _stopped.store(true);
        for (auto& prom : _stream_stop_promises) {
            if (auto handle = prom.lock()) {
                handle->set_value();
            }
        }
    }

private:
    void register_stream_stop_promise(std::weak_ptr<std::promise<void>> prom)
    {
        // If we have already stopped, set promise immediately and don't add it to list.
        if (_stopped.load()) {
            if (auto handle = prom.lock()) {
                handle->set_value();
            }
        } else {
            _stream_stop_promises.push_back(prom);
        }
    }

    void unregister_stream_stop_promise(std::shared_ptr<std::promise<void>> prom)
    {
        for (auto it = _stream_stop_promises.begin(); it != _stream_stop_promises.end();
             /* ++it */) {
            if (it->lock() == prom) {
                it = _stream_stop_promises.erase(it);
            } else {
                ++it;
            }
        }
    }

    LazyPlugin& _lazy_plugin;
    std::atomic<bool> _stopped{false};
    std::vector<std::weak_ptr<std::promise<void>>> _stream_stop_promises{};
};

} // namespace mavsdk_server
} // namespace mavsdk